tosca_definitions_version: cloudify_dsl_1_3

description: Cloudify Helm-eks blueprint. Creates EKS cluster and installs helm chart on top of it.

imports:
  - https://cloudify.co/spec/cloudify/6.3.0/types.yaml
  - plugin:cloudify-helm-plugin
  - plugin:cloudify-kubernetes-plugin
  - plugin:cloudify-utilities-plugin

inputs:

  aws_region_name:
      type: string
      display_label: Region
      default: 'us-east-1'
      constraints:
        - valid_values:
            - us-east-1
            - us-east-2
            - us-west-1
            - us-west-2
            - eu-central-1
            - eu-west-1
            - eu-west-2
            - eu-south-1
            - eu-west-3
            - eu-north-1
            - af-south-1
            - ap-east-1
            - ap-south-1
            - ap-northeast-3
            - ap-northeast-2
            - ap-southeast-1
            - ap-southeast-2
            - ap-northeast-1
            - ca-central-1
            - cn-north-1
            - cn-northwest-1
            - me-south-1
            - sa-east-1
  
  aws_az_1:
    type: string
    display_label: Availability Zone 1
    default: { concat: [ { get_input: aws_region_name }, 'a' ] }

  aws_az_2:
    type: string
    display_label: Availability Zone 2
    default: { concat: [ { get_input: aws_region_name }, 'c' ] }

  eks_cluster_name:
    type: string
    display_label: EKS Cluster Name
    default: cloudify-demo

  helm_installation_source:
    description: Helm download link.
    display_label: Helm Installation Source
    type: string
    default: 'https://get.helm.sh/helm-v3.3.1-linux-amd64.tar.gz'

node_templates:

  eks_cluster:
    type: cloudify.nodes.Component
    properties:
      resource_config:
        blueprint:
          id: { concat: [ { get_input: eks_cluster_name }, "-cluster" ] }
          blueprint_archive: https://github.com/cloudify-community/blueprint-examples/releases/download/latest/kubernetes-aws-eks.zip
          main_file_name: 'blueprint.yaml'
        deployment:
          id: { concat: [ { get_input: eks_cluster_name }, "-cluster" ] }
          inputs:
            eks_cluster_name: { get_input: eks_cluster_name }
            aws_region_name: { get_input: aws_region_name }
            availability_zone_1: { concat: [ { get_input: aws_region_name }, 'a' ] }
            availability_zone_2: { concat: [ { get_input: aws_region_name }, 'b' ] }
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          implementation: cfy_extensions.cloudify_types.component.execute_start
          inputs:
            timeout: 3600

  argocd:
    type: cloudify.nodes.Component
    properties:
      resource_config:
        blueprint:
          id: { concat: [ { get_input: eks_cluster_name }, "-argocd" ] }
          blueprint_archive: https://github.com/acritelli/cfy-argocdtest/archive/refs/heads/dev.zip
          main_file_name: argocd.yaml
        deployment:
          id: { concat: [ { get_input: eks_cluster_name }, "-argocd" ] }

#   helm_install:
#     type: cloudify.nodes.helm.Binary
#     properties:
#       use_existing_resource: false
#       installation_source: { get_input: helm_installation_source }

#   repo:
#     type: cloudify.nodes.helm.Repo
#     properties:
#       resource_config:
#         name: bitnami
#         repo_url: https://charts.bitnami.com/bitnami
#     relationships:
#       - target: helm_install
#         type: cloudify.helm.relationships.run_on_host

#   release:
#     type: cloudify.nodes.helm.Release
#     properties:
#       client_config:
#         configuration: &kubernetes_master_configuration
#           file_content: { get_secret: kubernetes_config }
#           api_options:
#             api_key: { get_secret: kubernetes_token }
#       resource_config:
#         name: argo-cd
#         chart: bitnami/argo-cd
#         set_values:
#           - name: "server.service.type"
#             value: LoadBalancer
#     relationships:
#       - target: helm_install
#         type: cloudify.helm.relationships.run_on_host
#       - target: repo
#         type: cloudify.relationships.depends_on
#       - target: eks_cluster
#         type: cloudify.relationships.depends_on


#   agrocd_service_endpoint:
#     type: cloudify.kubernetes.resources.Service
#     properties:
#       client_config:
#         configuration: *kubernetes_master_configuration
#       use_external_resource: true
#       definition:
#         apiVersion: v1
#         kind: Service
#         metadata:
#           name: argo-cd-server
#     relationships:
#       - target: release
#         type: cloudify.relationships.depends_on

#   argocd_secret:
#     type: cloudify.kubernetes.resources.CustomBlueprintDefinedResource
#     properties:
#       client_config:
#         configuration: *kubernetes_master_configuration
#       use_external_resource: true
#       definition:
#         apiVersion: v1
#         kind: Secret
#         metadata:
#           name: 'argocd-secret'
#       api_mapping:
#         create:
#           api: CoreV1Api
#           method: create_namespaced_secret
#           payload: V1Secret
#         read:
#           api: CoreV1Api
#           method: read_namespaced_secret
#         update:
#           api: CoreV1Api
#           method: replace_namespaced_secret
#           payload: V1Secret
#         delete:
#           api: CoreV1Api
#           method: delete_namespaced_secret
#           payload: V1DeleteOptions
#     relationships:
#       - type: cloudify.relationships.depends_on
#         target: agrocd_service_endpoint
#     interfaces:
#       cloudify.interfaces.lifecycle:
#         delete: {}
#         poststart:
#           implementation: scripts/decode_secret.py
#           executor: central_deployment_agent
#           inputs:
#             secret: { get_attribute: [ argocd_secret, kubernetes, data, clearPassword ] }

#   wait_for_argocd:
#     type: cloudify.nodes.Root
#     interfaces:
#       cloudify.interfaces.lifecycle:
#         create:
#           implementation: scripts/wait_for_ip.py
#           executor: central_deployment_agent
#           inputs:
#             host: { get_attribute: [ agrocd_service_endpoint, kubernetes, status, load_balancer, ingress, 0, hostname ] }
#     relationships:
#       - type: cloudify.relationships.depends_on
#         target: argocd_secret

#   agrocd_token:
#     type: cloudify.rest.Requests
#     properties:
#       hosts: [ { get_attribute: [ agrocd_service_endpoint, kubernetes, status, load_balancer, ingress, 0, hostname ] } ]
#       port: 443
#       ssl: true
#       verify: false
#     interfaces:
#       cloudify.interfaces.lifecycle:
#         start:
#           inputs:
#             template_file: resources/authorize_agrocd.yaml
#             params:
#               USERNAME: 'admin'
#               PASSWORD: { get_attribute: [ argocd_secret, decoded_secret ] }
#     relationships:
#       - type: cloudify.relationships.depends_on
#         target: wait_for_argocd

#   agrocd_add_repo:
#     type: cloudify.rest.Requests
#     properties:
#       hosts: [{ get_attribute: [ agrocd_service_endpoint, kubernetes, status, load_balancer, ingress, 0, hostname ] }]
#       port: 443
#       ssl: true
#       verify: false
#     interfaces:
#       cloudify.interfaces.lifecycle:
#         start:
#           inputs:
#             template_file: resources/add_repository.yaml
#             params:
#               REPO: 'https://github.com/ahmadiesa-abu/ArgoCD-Example.git'
#               TOKEN: {concat: ["Bearer ",{ get_attribute: [ agrocd_token, result_properties, token ] }]}
#     relationships:
#       - type: cloudify.relationships.depends_on
#         target: agrocd_token

#   agrocd_create_application:
#     type: cloudify.rest.Requests
#     properties:
#       hosts: [{ get_attribute: [ agrocd_service_endpoint, kubernetes, status, load_balancer, ingress, 0, hostname ] }]
#       port: 443
#       ssl: true
#       verify: false
#     interfaces:
#       cloudify.interfaces.lifecycle:
#         configure:
#           inputs:
#             template_file: resources/create_application.yaml
#             params:
#               REPO: 'https://github.com/ahmadiesa-abu/ArgoCD-Example.git'
#               NAME: 'agrocd'
#               TOKEN: {concat: ["Bearer ",{ get_attribute: [ agrocd_token, result_properties, token ] }]}
#         start:
#           inputs:
#             template_file: resources/sync_application.yaml
#             params:
#               NAME: 'agrocd'
#               TOKEN: {concat: ["Bearer ",{ get_attribute: [ agrocd_token, result_properties, token ] }]}
#         delete:
#           inputs:
#             template_file: resources/delete_application.yaml
#             params:
#               NAME: 'agrocd'
#               TOKEN: {concat: ["Bearer ",{ get_attribute: [ agrocd_token, result_properties, token ] }]}
#     relationships:
#       - type: cloudify.relationships.depends_on
#         target: agrocd_add_repo

#   nginx_service:
#     type: cloudify.kubernetes.resources.Service
#     properties:
#       client_config:
#         configuration: *kubernetes_master_configuration
#       use_external_resource: true
#       definition:
#         apiVersion: v1
#         kind: Service
#         metadata:
#           name: nginx
#     relationships:
#       - target: agrocd_create_application
#         type: cloudify.relationships.depends_on


#   wait_for_nginx:
#     type: cloudify.nodes.Root
#     interfaces:
#       cloudify.interfaces.lifecycle:
#         create:
#           implementation: scripts/wait_for_ip.py
#           executor: central_deployment_agent
#           inputs:
#             host: {get_attribute: [ nginx_service, kubernetes, status, load_balancer, ingress, 0, hostname]}
#     relationships:
#       - type: cloudify.relationships.depends_on
#         target: nginx_service

# outputs:

#   agrocd_url:
#     value: { concat: [ "http://", { get_attribute: [ agrocd_service_endpoint, kubernetes, status, load_balancer, ingress, 0, hostname ] } ] }
#   nginx_url:
#     value: { concat: [ 'http://', {get_attribute: [ nginx_service, kubernetes, status, load_balancer, ingress, 0, hostname]}] }
#   agrocd_user:
#     value: admin
#   agrocd_passsword:
#     value: { get_attribute: [ argocd_secret, decoded_secret ] }
