tosca_definitions_version: cloudify_dsl_1_3

description: Cloudify Helm-eks blueprint. Creates EKS cluster and installs helm chart on top of it.

imports:
  - https://cloudify.co/spec/cloudify/6.3.0/types.yaml
  - plugin:cloudify-helm-plugin
  - plugin:cloudify-kubernetes-plugin
  - plugin:cloudify-utilities-plugin

inputs:

  infra_archive:
    description: >
      URL of EKS example zip file.
    type: string
    default: 'https://github.com/cloudify-community/blueprint-examples/releases/download/latest/kubernetes-aws-eks.zip'

  infra_exists:
    description: >
      Whether a getting eks example blueprint has already been uploaded to the manager or not.
    default: false

  infra_deployment_id:
    description: The blueprint name, the deployment name.
    default: { get_input: eks_cluster_name }

  eks_cluster_name:
    type: string

  eks_cluster_name:
    type: string

  repo_name:
    description: >
      Name of the repo to add.
    type: string
    default: bitnami

  chart_name:
    description: >
      Chart package name to deploy from repo.
    default: argo-cd

  helm_installation_source:
    description: >
      Helm download link.
    type: string
    default: 'https://get.helm.sh/helm-v3.3.1-linux-amd64.tar.gz'

  repo_url:
    description: >
      URL of the repo to add. For example:
      https://kubernetes-charts.storage.googleapis.com/
    type: string
    default: https://charts.bitnami.com/bitnami

  service_account_name:
    type: string
    default: examples-user

  service_account_namespace:
    type: string
    default: default

node_templates:

  eks_cluster:
    type: cloudify.nodes.Component
    properties:
      resource_config:
        blueprint:
          id: { get_input: infra_deployment_id }
          blueprint_archive: { get_input: infra_archive }
          main_file_name: 'blueprint.yaml'
          external_resource: { get_input: infra_exists }
        deployment:
          id: { get_input: infra_deployment_id }
          inputs:
            eks_cluster_name: { get_input: eks_cluster_name }
            aws_region_name: 'us-west-1'
            availability_zone_1: 'us-west-1a'
            availability_zone_2: 'us-west-1c'
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          implementation: cfy_extensions.cloudify_types.component.execute_start
          inputs:
            timeout: 3600

  helm_install:
    type: cloudify.nodes.helm.Binary
    properties:
      use_existing_resource: false
      installation_source: { get_input: helm_installation_source }

  repo:
    type: cloudify.nodes.helm.Repo
    properties:
      resource_config:
        name: { get_input: repo_name }
        repo_url: { get_input: repo_url }
    relationships:
      - target: helm_install
        type: cloudify.helm.relationships.run_on_host

  release:
    type: cloudify.nodes.helm.Release
    properties:
      client_config:
        configuration: &kubernetes_master_configuration
          file_content: { get_secret: kubernetes_config }
          api_options:
            api_key: { get_secret: kubernetes_token }
      resource_config:
        name: "argo-cd"
        chart: { concat: [ { get_input: repo_name },'/', { get_input: chart_name } ] }
        set_values:
          - name: "server.service.type"
            value: LoadBalancer
    relationships:
      - target: helm_install
        type: cloudify.helm.relationships.run_on_host
      - target: repo
        type: cloudify.relationships.depends_on
      - target: eks_cluster
        type: cloudify.relationships.depends_on


  agrocd_service_endpoint:
    type: cloudify.kubernetes.resources.Service
    properties:
      client_config:
        configuration: *kubernetes_master_configuration
      use_external_resource: true
      definition:
        apiVersion: v1
        kind: Service
        metadata:
          name: argo-cd-server
    relationships:
      - target: release
        type: cloudify.relationships.contained_in

  argocd_secret:
    type: cloudify.kubernetes.resources.CustomBlueprintDefinedResource
    properties:
      client_config:
        configuration: *kubernetes_master_configuration
      use_external_resource: true
      definition:
        apiVersion: v1
        kind: Secret
        metadata:
          name: 'argocd-secret'
      api_mapping:
        create:
          api: CoreV1Api
          method: create_namespaced_secret
          payload: V1Secret
        read:
          api: CoreV1Api
          method: read_namespaced_secret
        update:
          api: CoreV1Api
          method: replace_namespaced_secret
          payload: V1Secret
        delete:
          api: CoreV1Api
          method: delete_namespaced_secret
          payload: V1DeleteOptions
    relationships:
      - type: cloudify.relationships.depends_on
        target: release
    interfaces:
      cloudify.interfaces.lifecycle:
        delete: {}
        poststart:
          implementation: scripts/decode_secret.py
          executor: central_deployment_agent
          inputs:
            secret: { get_attribute: [ argocd_secret, kubernetes, data, clearPassword ] }

  agrocd_token:
    type: cloudify.rest.Requests
    properties:
      hosts: [{ get_attribute: [ agrocd_service_endpoint, kubernetes, status, load_balancer, ingress, 0, hostname ] }]
      port: 443
      ssl: true
      verify: false
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          inputs:
            template_file: resources/authorize_agrocd.yaml
            params:
              USERNAME: 'admin'
              PASSWORD: { get_attribute: [ argocd_secret, decoded_secret ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: argocd_secret

  agrocd_add_repo:
    type: cloudify.rest.Requests
    properties:
      hosts: [{ get_attribute: [ agrocd_service_endpoint, kubernetes, status, load_balancer, ingress, 0, hostname ] }]
      port: 443
      ssl: true
      verify: false
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          inputs:
            template_file: resources/add_repository.yaml
            params:
              REPO: 'https://github.com/Einsteinish/ArgoCD.git'
              TOKEN: {concat: ["Bearer ",{ get_attribute: [ agrocd_token, result_properties, token ] }]}
    relationships:
      - type: cloudify.relationships.depends_on
        target: agrocd_token

  agrocd_create_application:
    type: cloudify.rest.Requests
    properties:
      hosts: [{ get_attribute: [ agrocd_service_endpoint, kubernetes, status, load_balancer, ingress, 0, hostname ] }]
      port: 443
      ssl: true
      verify: false
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          inputs:
            template_file: resources/create_application.yaml
            params:
              TOKEN: {concat: ["Bearer ",{ get_attribute: [ agrocd_token, result_properties, token ] }]}
        start:
          inputs:
            template_file: resources/sync_application.yaml
            params:
              NAME: 'agrocd'
              TOKEN: {concat: ["Bearer ",{ get_attribute: [ agrocd_token, result_properties, token ] }]}
        delete:
          inputs:
            template_file: resources/delete_application.yaml
            params:
              NAME: 'agrocd'
              TOKEN: {concat: ["Bearer ",{ get_attribute: [ agrocd_token, result_properties, token ] }]}
    relationships:
      - type: cloudify.relationships.depends_on
        target: agrocd_add_repo



outputs:

  agrocd_url:
    value: { concat: [ "http://", { get_attribute: [ agrocd_service_endpoint, kubernetes, status, load_balancer, ingress, 0, hostname ] } ] }
  agrocd_user:
    value: admin
  agrocd_passsword:
    value: { get_attribute: [ argocd_secret, decoded_secret ] }
